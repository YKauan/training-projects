#Include "Totvs.ch"
#include "Colors.ch"
#include "Protheus.ch"
#include "Tlpp-core.th"

/*/-------------------------------------------------------------------
| - Programa: SleekTLPPDemo                                          |
| - Autor:                                                           |
| - Data: 15/07/2024                                                 |
| - Descrição: Demostração de objetos personalizaveis com SetCss     |
-------------------------------------------------------------------/*/
User Function SleekTLPPDemo()

    Local aArea           As Array
    Local aAbas           As Array
    Local aCampos         As Array
    Local aValoresCombo01 As Array
    Local aValoresCombo02 As Array
    Local aValoresListBox As Array
    Local aValoresRadio   As Array
    Local oFolder         As Object
    Local oPanelTop       As Object
    Local oPanelBot       As Object
    Local oPanelTSE       As Object
    Local oPanelTRE       As Object
    Local oPanelMenu      As Object
    Local oPanelEdit      As Object
    Local oPanelLeft      As Object
    Local oPanelGroup     As Object
    Local oPanelItens     As Object
    Local oPanelRight     As Object
    Local oFWLayerLines   As Object
    Local oFWLayerColumns As Object
    Local cTitulo         As Character

    Private aCordenadas   As Array
    Private oSay01        As Object
    Private oSay02        As Object
    Private oGet01        As Object
    Private oGet02        As Object
    Private oBtn01        As Object
    Private oBtn02        As Object
    Private oTTree        As Object
    Private oMsgBar       As Object
    Private oSlider       As Object
    Private oBrowse       As Object
    Private oSpinBox      As Object
    Private oMeter01      As Object
    Private oListBox      As Object
    Private oGroup01      As Object
    Private oCombo01      As Object
    Private oCombo02      As Object
    Private oCheck01      As Object
    Private oCheck02      As Object
    Private oMultiGet     As Object
    Private oMsgItem01    As Object
    Private oMsgItem02    As Object
    Private oMainWindow   As Object
    Private lCheck1       As Logical
    Private lCheck2       As Logical
    Private nRadio        As Numeric
    Private nNumLine      As Numeric
    Private nSpinBox      As Numeric
    Private nNumMeter     As Numeric
    Private cTextoSay01   As Character
    Private cTextoSay02   As Character
    Private cGet01        As Character
    Private cGet02        As Character
    Private cCombo01      As Character
    Private cCombo02      As Character
    Private cTextMsgBar   As Character
    Private cTextoMultGet As Character

    aArea           := FWGetArea()
    aCordenadas     := fRetSize()
    nNumMeter       := 50
    aCampos         := {}
    cGet01          := ""
    cGet02          := ""
    cTitulo         := "SleekTLPPDemo"
    cTextoSay01     := "Texto do Say 01"
    cTextoSay02     := "Texto do Say 02"
    cTextoMultGet   := "Texto do MultiGet" + CRLF + "Texto do MultiGet"
    cTextMsgBar     := SM0->M0_CODFIL
    aAbas           := { 'Aba 01', 'Aba 02' }
    aValoresCombo01 := { 'Item 01', 'Item 02', 'Item 03', 'Item 04', 'Item 05' }
    aValoresCombo02 := { 'Item 06', 'Item 07', 'Item 08', 'Item 09', 'Item 10' }
    aValoresListBox := { 'Item 11', 'Item 12', 'Item 13', 'Item 14', 'Item 15' }
    aValoresRadio   := { 'Item 18', 'Item 19', 'Item 20', 'Item 21', 'Item 22' }
    cTxtSimpEdt     := "SleekTLPP <b>Negrito</b>"                           + CRLF + ;
                       "<font color = red> Texto em Vermelho </font>"       + CRLF + ;
                       "<font size = 14> Texto com tamanho grande </font>"  + CRLF + ;
                       "<i> Texto em itálico </i>"                          + CRLF + ;
                       "<u> Texto sublinhado </u>"                          + CRLF + ;
                       "<font color = blue size = 10> Texto azul e tamanho 10 </font>" + CRLF + ;
                       "<sup> Texto sobrescrito </sup>"                     + CRLF + ;
                       "<sub> Texto subscrito </sub>"

    Define MSDIALOG oMainWindow Title cTitulo From aCordenadas[1], aCordenadas[2] To aCordenadas[3], aCordenadas[4] Pixel Of GetWndDefault() Style nOr(WS_VISIBLE, WS_POPUP)

    oFWLayerColumns := FWLayer():New()
	oFWLayerColumns:Init( oMainWindow, .F. )

    oFWLayerColumns:AddCollumn( 'COLL', 15, .T. )
 	oFWLayerColumns:AddCollumn( 'COLR', 85, .T. )

    oPanelLeft  := oFWLayerColumns:GetColPanel( 'COLL' )
    oPanelRight := oFWLayerColumns:GetColPanel( 'COLR' )

    oFWLayerLines := FWLayer():New()
	oFWLayerLines:Init( oPanelRight, .F. )

    oFWLayerLines:AddLine( 'LINTOP', 90, .F. ) 
    oFWLayerLines:AddLine( 'LINBOT', 10, .F. )

    oPanelTop := oFWLayerLines:GetLinePanel( 'LINTOP' )
    oPanelBot := oFWLayerLines:GetLinePanel( 'LINBOT' )

    oSplitter := TSplitter():New( 01, 01, oPanelRight, 100, 100, 1 )
    oSplitter:Align := CONTROL_ALIGN_ALLCLIENT

    //oPanelMenu  := TPanel():New( 0, 100, , oPanelLeft , , , , , CLR_BLUE, 100, 100, ) 
    oPanelMenu  := TPanelCss():New( 0, 100, Nil, oPanelLeft, Nil, Nil, Nil, Nil, Nil, 100, 100, Nil, Nil )
    oPanelMenu:Align := CONTROL_ALIGN_ALLCLIENT
    oPanelMenu:SetCss( SleekTLPP():TPanelCssQCss() )
    oPanelItens := TPanel():New( 0, 100, , oSplitter  , , , , , , 100, 100, )
    oPanelItens:Align := CONTROL_ALIGN_ALLCLIENT
    oPanelItens:SetCss( SleekTLPP():TPanelQCss() )
    oPanelEdit  := TPanel():New( 0, 100, , oSplitter  , , , , , , 100, 100, )
    oPanelEdit:Align := CONTROL_ALIGN_ALLCLIENT
    oPanelEdit:SetCss( SleekTLPP():TPanelQCss() )

    oSplitter:SetChildCollapse( .F. )

    oFolder     := TFolder():New( 001, 005, aAbas , , oPanelItens , , , , .T. , , 100, 100 )
    oFolder:SetCss( SleekTLPP():TFolderQCss() )

    oSay01      := TSay():New( 005, 005, { || cTextoSay01 }, oFolder:aDialogs[1], , , , , , .T., CLR_BLUE, CLR_WHITE, 60, 20 )
    oSay01:SetCss( SleekTLPP():TSayQCss() )
    oSay02      := TSay():New( 005, 005, { || cTextoSay02 }, oFolder:aDialogs[2], , , , , , .T., CLR_BLUE, CLR_WHITE, 60, 20 )
    oSay02:SetCss( SleekTLPP():TSayQCss() )

    oCheck01    := TCheckBox():New( aCordenadas[1] + 010, aCordenadas[2] + 125, "Check Box 01", {|u|If (PCount() > 0, lCheck1 := u, lCheck1)}, oPanelItens, 100, 10, , {|| }, , , , , , .T., "Marque O CheckBox", , )
    oCheck01:SetCss( SleekTLPP():TCheckBoxQCss() )
    oCheck02    := TCheckBox():New( aCordenadas[1] + 020, aCordenadas[2] + 125, "Check Box 02", {|u|If (PCount() > 0, lCheck1 := u, lCheck1)}, oPanelItens, 100, 10, , {|| }, , , , , , .T., "Marque O CheckBox", , )
    oCheck02:SetCss( SleekTLPP():TCheckBoxQCss() )

    oBtn01      := TButton():New( aCordenadas[1] + 030, aCordenadas[2] + 125, "Botão 01" , oPanelItens, { || FWMsgRun(, {|| } , "Aguarde...", "Atualizando informacoes da tela...... Aguarde...") }, 50, 15, , , .F., .T., .F., ,.F., , , .F. )
    oBtn01:SetCss( SleekTLPP():TButtonQCss() )
    oBtn02      := TButton():New( aCordenadas[1] + 050, aCordenadas[2] + 125, ""         , oPanelItens, { || FWMsgRun(, {|| } , "Aguarde...", "Atualizando informacoes da tela...... Aguarde...") }, 20, 10, , , .F., .T., .F., ,.F., , , .F. )
    oBtn02:SetCss( SleekTLPP():TButtonQCss() )
    
    oCombo01    := TComboBox():New( aCordenadas[1] + 065, aCordenadas[2] + 125, { |u|If (PCount() > 0, cCombo01 := u, cCombo01) }, aValoresCombo01, 070, 16, oPanelItens, , {|| }, , , , .T., , , , , , , , , "cCombo01" )
    oCombo01:SetCss( SleekTLPP():TComboBoxQCss() )
    oCombo02    := TComboBox():New( aCordenadas[1] + 085, aCordenadas[2] + 125, { |u|If (PCount() > 0, cCombo02 := u, cCombo02) }, aValoresCombo02, 070, 16, oPanelItens, , {|| }, , , , .T., , , , , , , , , "cCombo02" )
    oCombo02:SetCss( SleekTLPP():TComboBoxQCss() )

    oGet01      := TGet():New( aCordenadas[1] + 010, aCordenadas[2] + 210, {|u| If (PCount() > 0 , cGet01 := u, cGet01) }, oPanelItens, 050, 15, "@!", {|| }, 0, , , , , .T., , , , , , , .F., .F., , "cGet01", , , , .F. )
    oGet01:SetCss( SleekTLPP():TGetQCss() )

    oPanelGroup := TPanel():New( aCordenadas[1] + 035, aCordenadas[2] + 210, , oPanelItens  , , , , , CLR_WHITE, 050, 050, )

    oGroup01    := TGroup():New( 000, 000, 050, 050, 'Objeto TGroup', oPanelGroup, , , .T. )
    oGroup01:SetCss( SleekTLPP():TGroupQCss() )

    oGet02      := TGet():New( 020, 007, {|u| If (PCount() > 0 , cGet02 := u, cGet02) }, oGroup01, 035, 15, "@!", {|| }, 0, , , , , .T., , , , , , , .F., .F., , "cGet02", , , , .F. )
    oGet02:SetCss( SleekTLPP():TGetQCss( {.T., "background-color: #313866; border: white;"}, , "border: 2px solid white;" ) )

    oListBox    := TListBox():New( aCordenadas[1] + 010 , aCordenadas[2] + 285, { |u| If (PCount() > 0, nNumLine := u, nNumLine) } , aValoresListBox, 100, 100, { || MsgInfo("Mudou de Linha, linha atual: " + cValToChar( nNumLine ),"Linha!") }, oPanelItens, , , , .T.)
    oListBox:SetCss( SleekTLPP():TListBoxQCss() )

    oMeter01    := TMeter():New( aCordenadas[1] + 010 , aCordenadas[2] + 400, { |u| If ( PCount() > 0, nNumMeter := u, nNumMeter ) }, 100, oPanelItens, 100, 16, , .T. )
    oMeter01:SetCss( SleekTLPP():TMeterQCss() )

    oMsgBar     := TMsgBar():New( oPanelMenu, cTextMsgBar, .F., .F., .F., .F., Rgb( 116, 116, 116 ) , , , .F. )
    oMsgBar:SetCss( SleekTLPP():TMsgBarQCss() )

    oMsgItem01  := TMsgItem():New( oMsgBar, 'Item 16', 100, , , , .T., { || } )
    
    oMsgItem02  := TMsgItem():New( oMsgBar, 'Item 17', 100, , , , .T., { || MsgInfo("Item 02 TMsgBar ", "TMsgBar!") } )

    oMultiGet   := TMultiGet():New( aCordenadas[1] + 030 , aCordenadas[2] + 400, {| u | If ( PCount() > 0, cTextoMultGet := u, cTextoMultGet ) }, oPanelItens, 100, 080, , , , , , .T. )
    oMultiGet:SetCss( SleekTLPP():TMultiGetQCss() )

    oRadio      := TRadMenu():New( aCordenadas[1] + 010 , aCordenadas[2] + 525, aValoresRadio, , oPanelItens, , , , , , , , 50, 12, , , , .T. )
    oRadio:bSetGet := { |u| IIf( PCount() == 0, nRadio, nRadio := u ) }
    oRadio:SetCss( SleekTLPP():TRadMenuQCss() )

    oSlider     := TSlider():New( aCordenadas[1] + 050 , aCordenadas[2] + 525, oPanelItens, { |u| Alert("oSlider: "+Str(u,4))} ,50, 30, "Mensagem", Nil )
    oSlider:SetCss( SleekTLPP():TSliderQCss() )

    oPanelTSE   := TPanel():New( aCordenadas[1] + 110 , 005, , oPanelItens  , , , , , , 250, 50, )

    oSimpleEdit := TSimpleEditor():Create( oPanelTSE )
    oSimpleEdit:lAutoIndent := .T.
    oSimpleEdit:nWidth      := oPanelTSE:nWidth
    oSimpleEdit:nHeight     := oPanelTSE:nHeight
    oSimpleEdit:TextFormat(1)
    oSimpleEdit:Load( cTxtSimpEdt )
    oSimpleEdit:Refresh()
    oSimpleEdit:SetCss( SleekTLPP():TSimpleEditorQCss() )

    oSpinBox := TSpinBox():new( aCordenadas[1] + 080 , aCordenadas[2] + 525, oPanelItens, { |u| nSpinBox := u }, 30, 13)
    oSpinBox:setRange( 0, 25 )
    oSpinBox:setStep(5)
    oSpinBox:setValue( nSpinBox )
    oSpinBox:SetCss( SleekTLPP():TSpinBoxQCss() )

    aCampos := GetDadosTCBrowser()

    oBrowse := TCBrowse():New( aCordenadas[1] + 170 , 005, oPanelRight:nWidth - 200, 75, , {'','Codigo','Descrição','Tipo'},{50,50,50,50}, oPanelItens,,,,,{||},,,,,,"TCB_CODI",.F.,,.T.,,.F.,,, ) 
    oBrowse:SetArray( aCampos ) 
    oBrowse:SetCss( SleekTLPP():TCBrowseQCss() )

    oBrowse:bLine := {||{ '', aCampos[oBrowse:nAt,02], aCampos[oBrowse:nAt,03], aCampos[oBrowse:nAT,04]} }

    oPanelTRE   := TPanel():New( aCordenadas[1] + 120 , aCordenadas[2] + 285, , oPanelItens  , , , , , , 250, 045, )

    oTTree := TTree():New( 000, 000, 045, 250, oPanelTRE, , )
    oTTree:BeginUpdate()
    oTTree:PTAddNodes( StrZero(0,7), StrZero(1,7), "", "Primeiro nível da TTree", "FOLDER5", "FOLDER6" )
    oTTree:PTAddNodes( StrZero(1,7), StrZero(2,7), "", "Segundo nível da TTree", "FOLDER10", )
    oTTree:PTAddNodes( StrZero(2,7), StrZero(3,7), "", "Subnível 01", "FOLDER5", "FOLDER6" )
    oTTree:PTAddNodes( StrZero(2,7), StrZero(4,7), "", "Subnível 02", "FOLDER5", "FOLDER6" )
    oTTree:PTAddNodes( StrZero(2,7), StrZero(5,7), "", "Subnível 03", "FOLDER5", "FOLDER6" )
    oTTree:PTSendNodes()
    oTTree:EndUpdate()
    oTTree:SetCss( SleekTLPP():TTreeQCss() )

    //=> Ativando a janela
    oMainWindow:Activate(,,,.T.,,,{||},,)

    FWRestArea( aArea )

Return(Nil)

/*/-------------------------------------------------------------------
| - Função: fRetSize                                                 |
| - Autor: Kauan Santana                                             |
| - Data: 15/07/2024                                                 |
| - Descrição: Função que retorna o tamanho da tela                  |
-------------------------------------------------------------------/*/
Static Function fRetSize( nOp As Numeric ) As Array

    Local aRet As Array
    Local aPos As Array
    
    Default nOp := 1

    aRet := {}
    aPos := FWGetDialogSize( oMainWindow ) 

    If nOp = 1
        aAdd(aRet,000)
        aAdd(aRet,000)
        aAdd(aRet,aPos[3])
        aAdd(aRet,aPos[4])
    Elseif nOp = 2
        aAdd(aRet,000)
        aAdd(aRet,000)
        aAdd(aRet,500)
        aAdd(aRet,1100)
    Endif

Return( aRet )


/*/-------------------------------------------------------------------
| - Função: GetDadosTCBrowser                                        |
| - Autor: Kauan Santana                                             |
| - Data: 15/07/2024                                                 |
| - Descrição: Função que atualiza os itens do browse                |
-------------------------------------------------------------------/*/
Static Function GetDadosTCBrowser()

    Local aArea     := FWGetArea() As Array
    Local aCampos   := {}          As Array
	Local cQuery 	:= ""          As Character
	Local cAliasQry := ""          As Character

    cQuery := " SELECT * FROM (                              " + CRLF
    cQuery += "     SELECT                                   " + CRLF
    cQuery += "         SB1.B1_COD,                          " + CRLF
    cQuery += "         SB1.B1_DESC,                         " + CRLF
    cQuery += "         SB1.B1_TIPO                          " + CRLF
    cQuery += "     FROM " + RetSqlName("SB1") + " SB1       " + CRLF
    cQuery += "     WHERE SB1.D_E_L_E_T_ = ' '               " + CRLF
    cQuery += "     ORDER BY B1_COD, B1_DESC, B1_TIPO        " + CRLF
    cQuery += " )                                            " + CRLF
    cQuery += " WHERE ROWNUM <= 15                           " + CRLF

	cAliasQry := MPSysOpenQuery(cQuery)

    While !(cAliasQry)->(Eof())

        aAdd(aCampos,{" " , (cAliasQry)->B1_COD, (cAliasQry)->B1_DESC, (cAliasQry)->B1_TIPO })

        (cAliasQry)->(DbSkip())

    EndDo

	If Select(cAliasQry) > 0 .AND. !Empty(cAliasQry)
		(cAliasQry)->(DbCloseArea())
	EndIf

    FwRestArea(aArea)

Return( aCampos )
